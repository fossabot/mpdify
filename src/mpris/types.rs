#![allow(clippy::all)]

use dbus;
use dbus::arg;
use dbus::tree;

// This code was autogenerated by https://github.com/diwic/dbus-rs with:
// curl -s https://cgit.freedesktop.org/xdg/mpris-spec/plain/spec/org.mpris.MediaPlayer2.Player.xml
// | ~/.cargo/bin/dbus-codegen-rust -c nonblock -i "org.mpris.MediaPlayer2" > types.rs

pub trait Player {
    fn next(&self) -> Result<(), tree::MethodErr>;
    fn previous(&self) -> Result<(), tree::MethodErr>;
    fn pause(&self) -> Result<(), tree::MethodErr>;
    fn play_pause(&self) -> Result<(), tree::MethodErr>;
    fn stop(&self) -> Result<(), tree::MethodErr>;
    fn play(&self) -> Result<(), tree::MethodErr>;
    fn seek(&self, offset: i64) -> Result<(), tree::MethodErr>;
    fn set_position(&self, track_id: dbus::Path, position: i64) -> Result<(), tree::MethodErr>;
    fn open_uri(&self, uri: &str) -> Result<(), tree::MethodErr>;
    fn playback_status(&self) -> Result<String, tree::MethodErr>;
    fn loop_status(&self) -> Result<String, tree::MethodErr>;
    fn set_loop_status(&self, value: String) -> Result<(), tree::MethodErr>;
    fn rate(&self) -> Result<f64, tree::MethodErr>;
    fn set_rate(&self, value: f64) -> Result<(), tree::MethodErr>;
    fn shuffle(&self) -> Result<bool, tree::MethodErr>;
    fn set_shuffle(&self, value: bool) -> Result<(), tree::MethodErr>;
    fn metadata(
        &self,
    ) -> Result<
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        tree::MethodErr,
    >;
    fn volume(&self) -> Result<f64, tree::MethodErr>;
    fn set_volume(&self, value: f64) -> Result<(), tree::MethodErr>;
    fn position(&self) -> Result<i64, tree::MethodErr>;
    fn minimum_rate(&self) -> Result<f64, tree::MethodErr>;
    fn maximum_rate(&self) -> Result<f64, tree::MethodErr>;
    fn can_go_next(&self) -> Result<bool, tree::MethodErr>;
    fn can_go_previous(&self) -> Result<bool, tree::MethodErr>;
    fn can_play(&self) -> Result<bool, tree::MethodErr>;
    fn can_pause(&self) -> Result<bool, tree::MethodErr>;
    fn can_seek(&self) -> Result<bool, tree::MethodErr>;
    fn can_control(&self) -> Result<bool, tree::MethodErr>;
}

pub fn player_server<F, T, D>(
    factory: &tree::Factory<tree::MTFn<D>, D>,
    data: D::Interface,
    f: F,
) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    D::Signal: Default,
    T: Player,
    F: 'static + for<'z> Fn(&'z tree::MethodInfo<tree::MTFn<D>, D>) -> &'z T,
{
    let i = factory.interface("org.mpris.MediaPlayer2.Player", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        d.next()?;
        let rm = minfo.msg.method_return();
        Ok(vec![rm])
    };
    let m = factory.method("Next", Default::default(), h);
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        d.previous()?;
        let rm = minfo.msg.method_return();
        Ok(vec![rm])
    };
    let m = factory.method("Previous", Default::default(), h);
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        d.pause()?;
        let rm = minfo.msg.method_return();
        Ok(vec![rm])
    };
    let m = factory.method("Pause", Default::default(), h);
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        d.play_pause()?;
        let rm = minfo.msg.method_return();
        Ok(vec![rm])
    };
    let m = factory.method("PlayPause", Default::default(), h);
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        d.stop()?;
        let rm = minfo.msg.method_return();
        Ok(vec![rm])
    };
    let m = factory.method("Stop", Default::default(), h);
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        d.play()?;
        let rm = minfo.msg.method_return();
        Ok(vec![rm])
    };
    let m = factory.method("Play", Default::default(), h);
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let offset: i64 = i.read()?;
        let d = fclone(minfo);
        d.seek(offset)?;
        let rm = minfo.msg.method_return();
        Ok(vec![rm])
    };
    let m = factory.method("Seek", Default::default(), h);
    let m = m.in_arg(("Offset", "x"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let track_id: dbus::Path = i.read()?;
        let position: i64 = i.read()?;
        let d = fclone(minfo);
        d.set_position(track_id, position)?;
        let rm = minfo.msg.method_return();
        Ok(vec![rm])
    };
    let m = factory.method("SetPosition", Default::default(), h);
    let m = m.in_arg(("TrackId", "o"));
    let m = m.in_arg(("Position", "x"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let uri: &str = i.read()?;
        let d = fclone(minfo);
        d.open_uri(uri)?;
        let rm = minfo.msg.method_return();
        Ok(vec![rm])
    };
    let m = factory.method("OpenUri", Default::default(), h);
    let m = m.in_arg(("Uri", "s"));
    let i = i.add_m(m);

    let p = factory.property::<&str, _>("PlaybackStatus", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.playback_status()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("LoopStatus", Default::default());
    let p = p.access(tree::Access::ReadWrite);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.loop_status()?);
        Ok(())
    });
    let fclone = f.clone();
    let p = p.on_set(move |iter, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        d.set_loop_status(iter.read()?)?;
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<f64, _>("Rate", Default::default());
    let p = p.access(tree::Access::ReadWrite);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.rate()?);
        Ok(())
    });
    let fclone = f.clone();
    let p = p.on_set(move |iter, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        d.set_rate(iter.read()?)?;
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<bool, _>("Shuffle", Default::default());
    let p = p.access(tree::Access::ReadWrite);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.shuffle()?);
        Ok(())
    });
    let fclone = f.clone();
    let p = p.on_set(move |iter, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        d.set_shuffle(iter.read()?)?;
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory
        .property::<::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>, _>(
            "Metadata",
            Default::default(),
        );
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.metadata()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<f64, _>("Volume", Default::default());
    let p = p.access(tree::Access::ReadWrite);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.volume()?);
        Ok(())
    });
    let fclone = f.clone();
    let p = p.on_set(move |iter, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        d.set_volume(iter.read()?)?;
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<i64, _>("Position", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.position()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<f64, _>("MinimumRate", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.minimum_rate()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<f64, _>("MaximumRate", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.maximum_rate()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<bool, _>("CanGoNext", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.can_go_next()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<bool, _>("CanGoPrevious", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.can_go_previous()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<bool, _>("CanPlay", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.can_play()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<bool, _>("CanPause", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.can_pause()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<bool, _>("CanSeek", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.can_seek()?);
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<bool, _>("CanControl", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(d.can_control()?);
        Ok(())
    });
    let i = i.add_p(p);
    let s = factory.signal("Seeked", Default::default());
    let s = s.arg(("Position", "x"));
    let i = i.add_s(s);
    i
}

#[derive(Debug)]
pub struct PlayerSeeked {
    pub position: i64,
}

impl arg::AppendAll for PlayerSeeked {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.position, i);
    }
}

impl arg::ReadAll for PlayerSeeked {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(PlayerSeeked {
            position: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for PlayerSeeked {
    const NAME: &'static str = "Seeked";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.Player";
}
